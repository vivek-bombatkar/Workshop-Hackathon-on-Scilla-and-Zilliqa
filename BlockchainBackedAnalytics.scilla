
import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library BlockchainBackedAnalytics


let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let not_owner_code = Int32 1
let set_hello_code = Int32 2

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract BlockchainBackedAnalytics
(owner: ByStr20)

field welcome_msg : String = ""
field id : Uint128 = Uint128 0
field id_map : Map ByStr20 Uint128 = Emp ByStr20 Uint128

transition setTransitions (msg : String)
  one = Uint128 1;
  tmp <- id;
  res = builtin add tmp one;
  id := res;
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : not_owner_code};
    msgs = one_msg msg;
    send msgs
  | True =>
    (*chek tx# present in blockchain*)
    tmp1 <- id_map;
    tmp2 = builtin id_map 
    welcome_msg := msg;
    msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; txid : res};
    msgs = one_msg msg;
    send msgs
  end
end

